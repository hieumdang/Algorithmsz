#include <iostream>
#include <math.h>
#include <algorithm>
using namespace std;

double xcenter[3];     //center co-ordinators
double ycenter[3];
int previous_grouping[10];
int k;

double x[10];    // points co-ordinators
double y[10];

double d1[10];   //distance to center1, center2, center3
double d2[10];
double d3[10];

int grouping[10];
double accX1;    //accumulator
double accY1;
double accX2;    //accumulator
double accY2;
double accX3;
double accY3;


bool isIdentical(int[], int[], int);

int main()
{


	cout << "Enter the number of Clusters (K): " << endl;
	int c;
	cin >> c;


	accX1 = 0;
	accY1 = 0;
	accX2 = 0;
	accY2 = 0;
	accX3 = 0;
	accY3 = 0;
	//Assume the center
	for (int i = 0; i < c; i++)
	{
		cout << "Type in Cluster " << i + 1 << " center locations: " << endl;
		cin >> xcenter[i] >> ycenter[i];
	}

	cout << "Enter the number of points you want to add: ";
	int numOfPoints;
	cin >> numOfPoints;



	for (int i = 0; i < numOfPoints; i++)
	{
		cout << "Point " << i + 1 << " location (X, type enter, then Y): " << endl;
		cin >> x[i] >> y[i];
		previous_grouping[i] = 0;          //initialize previous_c;
	}

	bool done = isIdentical(grouping, previous_grouping, numOfPoints);
	done = false;
	for (int i = 0; i < numOfPoints; i++)
	{
		d1[i] = 0;
		d2[i] = 0;
		d3[i] = 0;
		grouping[i] = 0;
	}
	//calculate distance to centers 
	for (int i = 0; i < numOfPoints; i++)
	{
		d1[i] = abs(xcenter[0] - x[i]) + abs(ycenter[0] - y[i]);
		d2[i] = abs(xcenter[1] - x[i]) + abs(ycenter[1] - y[i]);
		d3[i] = abs(xcenter[2] - x[i]) + abs(ycenter[2] - y[i]);
	}
	//have 3 array of distances, now compare to find where it is belong to cluster 1,2,... or k

	for (int i = 0; i < numOfPoints; i++)
	{
		double min_dist;
		min_dist = std::min(d1[i], std::min(d2[i], d3[i]));
		if (min_dist == d1[i])
			grouping[i] = 1;
		else if (min_dist == d2[i])
			grouping[i] = 2;
		else grouping[i] = 3;
	}
	// now c[i] = [1,2,1,1,...2] blah blah blah
	int count1 = 0;
	int count2 = 0;
	int count3 = 0;
	for (k = 0; k < numOfPoints; k++)
	{
		if (grouping[k] == 1)
		{
			accX1 += x[k];
			accY1 += y[k];
			count1++;
		}
		else if (grouping[k] == 2)
		{
			accX2 += x[k];
			accY2 += y[k];
			count2++;
		}
		else if (grouping[k] == 3)
		{
			accX3 += x[k];
			accY3 += y[k];
			count3++;
		}
	}

	//take average
	xcenter[0] = accX1 / count1;
	ycenter[0] = accY1 / count1;
	xcenter[1] = accX2 / count2;
	ycenter[1] = accY2 / count2;
	xcenter[2] = accX3 / count3;
	ycenter[2] = accY3 / count3;


	cout << "Cluster 1 [" << xcenter[0] << ", " << ycenter[0] << "]" << endl;
	cout << "Cluster 2 [" << xcenter[1] << ", " << ycenter[1] << "]" << endl;
	cout << "Cluster 3 [" << xcenter[2] << ", " << ycenter[2] << "]" << endl;


	//have done the 1st iteration here 
	for (int i = 0; i < numOfPoints; i++)
	{
		count1 = 0, count2 = 0;     count3 = 0; //reset count
		accX1 = 0; accX2 = 0; accY1 = 0; accY2 = 0; accX3 = 0; accY3 = 0; //reset accumulator
																		  // recalculate distance to centers 
		for (int i = 0; i < numOfPoints; i++)
		{
			d1[i] = abs(xcenter[0] - x[i]) + abs(ycenter[0] - y[i]);
			d2[i] = abs(xcenter[1] - x[i]) + abs(ycenter[1] - y[i]);
			d3[i] = abs(xcenter[2] - x[i]) + abs(ycenter[2] - y[i]);
		}

		//restart dividing to new groups

		for (int i = 0; i < numOfPoints; i++)
		{
			previous_grouping[i] = grouping[i];
			grouping[i] = 0;            //reset c[i]
			double min_dist;
			min_dist = std::min(d1[i], std::min(d2[i], d3[i]));
			if (min_dist == d1[i])
				grouping[i] = 1;
			else if (min_dist == d2[i])
				grouping[i] = 2;
			else grouping[i] = 3;
		}

		for (int i = 0; i < numOfPoints; i++)
		{
			if (grouping[i] == 1)
			{
				accX1 += x[i];
				accY1 += y[i];
				count1++;
			}
			else if (grouping[i] == 2)
			{
				accX2 += x[i];
				accY2 += y[i];
				count2++;
			}
			else if (grouping[i] == 3)
			{


				accX3 += x[i];
				accY3 += y[i];
				count3++;
			}
		}

		if ((count1 == 0) | (count2 == 0) | (count3 == 0))
			break;
		//take average--> new center
		xcenter[0] = accX1 / count1;
		ycenter[0] = accY1 / count1;
		xcenter[1] = accX2 / count2;
		ycenter[1] = accY2 / count2;
		xcenter[2] = accX3 / count3;
		ycenter[2] = accY3 / count3;

		//update new average

		cout << "Cluster 1 [" << xcenter[0] << ", " << ycenter[0] << "]" << endl;
		cout << "Cluster 2 [" << xcenter[1] << ", " << ycenter[1] << "]" << endl;
		cout << "Cluster 3 [" << xcenter[2] << ", " << ycenter[2] << "]" << endl;
	}
	cout << endl;
	cout << "Final Cluster 1 [" << xcenter[0] << ", " << ycenter[0] << "]" << endl;
	cout << "Final Cluster 2 [" << xcenter[1] << ", " << ycenter[1] << "]" << endl;
	cout << "Final Cluster 3 [" << xcenter[2] << ", " << ycenter[2] << "]" << endl;

	cout << "Type any character to end." << endl;
	int finished;
	cin >> finished;
};



bool isIdentical(int c[], int previous_c[], int numOfPoints)
{
	int i = 0;
	//restriction to stop the while loop
	while (i < numOfPoints)
	{
		if (c[i] != previous_c[i])
		{
			return false;
		}
		i++;
	}
	return true;
}
